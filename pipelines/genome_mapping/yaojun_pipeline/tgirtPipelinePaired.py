#!/bin/env  python
# This is the pair-end pipeline for tgirt sequencing
# Mapping with hisat + bowtie local
# and extract tRNA reads for reassigning counts


from __future__ import division
from multiprocessing import Pool
import os
import sys
import time
import glob
import argparse
import re

def getopt():
    parser = argparse.ArgumentParser(description='Pipeline for mapping and counting for TGIRT-seq paired end data')
    parser.add_argument('-q', '--fastq', help = 'pairedEnd fastq file (read1)', required=True)
    parser.add_argument('-o','--outdir', help = 'result directory that all resulting/intermediate files will be stored\n' + \
                                         'will create 1. $resultpath/trimmed\n' + \
                                         '            2. $resultpath/hisat\n'  + \
                                         '            3. $resultpath/bowtie2\n' + \
                                         '            4. $resultpath/mergeBam (all useful result files)\n', required=True)
    parser.add_argument('-x', '--hisat_index', help = 'hisat2 index', required=True)
    parser.add_argument('-y', '--bowtie2_index', help = 'bowtie2 index', required=True)
    parser.add_argument('-b','--bedpath', help = 'bed folder for gene counting', required=True)
    parser.add_argument('-s','--splicesite', help = 'splice site file generated by hisat', required=True)
    parser.add_argument('-t','--tRNAindex' , help = 'bowtie2 index for tRNA, for better tRNA counting', required=True)
    parser.add_argument('-r','--rRNAindex' , help = 'bowtie2 index for rRNA, for better rRNA counting', required=True)
    parser.add_argument('-e','--rRNA_tRNA_index' , help = 'bowtie2 index for rRNA and tRNA combined', required=True)
    parser.add_argument('-p', '--threads', default=1, type=int, help = 'number of cores to be used for the pipeline (default:1)')
    args = parser.parse_args()
    return args

class sample_object():
    def __init__(self, args):
        # read input
        self.fastq1 = args.fastq
        self.outpath = args.outdir
        self.hisat_index = args.hisat_index
        self.bowtie2_index = args.bowtie2_index
        self.bedpath = args.bedpath
        self.splicesite = args.splicesite
        self.tRNA_index = args.tRNAindex
        self.rRNA_index = args.rRNAindex
        self.rRNA_tRNA_index = args.rRNA_tRNA_index
        self.threads = args.threads

        #### make folder
        self.trim_folder = self.outpath + '/Trim'
        self.count_folder= self.outpath + '/Counts'
	    self.count_raw = self.count_folder + '/RAW
	    self.count_simple = self.count_folder + '/Simple'
	    self.tRNA_raw = self.count_folder + '/tRNA_RAW'
	    self.tRNA_anti = self.count_folder + '/tRNA_anti'

        #define sample folder
        self.samplename = re.sub('.fastq|.gz|.fq','',self.fastq1.split('/')[-1])
        self.fastq2 = fastq1.replace('R1','R2').replace('1P','2P')
        self.sample_folder = self.outpath + '/' + self.samplename
        self.hisat_out = self.sample_folder + '/Hisat'
	    self.rRNA_tRNA_out = self.sample_folder + '/rRNA_tRNA_premap
        self.bowtie_out = self.sample_folder + '/Bowtie'
        self.combined_out = self.sample_folder + 'Combined'
        self.tRNA_out = self.sample_folder + '/tRNA'
        self.rRNA_out = self.sample_folder + '/rRNA'

        #make output file names
        self.trimed1= '%s/%s.1.fq.gz' %(self.trim_folder, self.samplename)
        self.trimed2= self.trimed1.replace('.1.fq.gz','.2.fq.gz')

        self.premap_fastq1 = '%s/non_tRNA_rRNA.1.fq' %self.rRNA_tRNA_out
        self.premap_fastq2 = '%s/non_tRNA_rRNA.2.fq' %self.rRNA_tRNA_out

        self.tRNA_fastq1 = '%s/tRNA.1.fq' %self.rRNA_tRNA_out
        self.tRNA_fastq1 = '%s/tRNA.2.fq' %self.rRNA_tRNA_out

        self.rRNA_fastq1 = '%s/rRNA.1.fq' %self.rRNA_tRNA_out
        self.rRNA_fastq1 = '%s/rRNA.2.fq' %self.rRNA_tRNA_out


    def result_dir(self):
        folders = [ self.trim_folder, self.count_folder, self.count_raw,
                self.count_simple, self.tRNA_raw, self.tRNA_anti,
                self.samplename, self.sample_folder, self.hisat_out, self.rRNA_tRNA_out,
                self.bowtie_out, self.combined_out, self.tRNA_out, self.rRNA_out]
        mf = map(makeFolder, folders)

    def trimming(self):
        R1 = 'AAGATCGGAAGAGCACACGTCTGAACTCCAGTCAC'
        R2 = 'GATCGTCGGACTGTAGAACTCTGAACGTGTAGA'
        command = 'cutadapt -m 15 -O 5 -n 3 -q 20 -b {R1} -B {R2} -o {trimed1} -p {trimed2} {file1} {file2}'\
            .format(R1=R1, R2=R2, trimed1=self.trimed1, trimed2=self.trimed2,
                    file1= self.fastq1, file2= self.fastq2)
        run_process(self.samplename, command)

    def premap_tRNA_rRNA(self):
        command = 'bowtie2 -p {threads} -D 20 -R 3 -N 0 -L 8 -i S,1,0.50 '.format(threads=self.threads)+\
            '--no-mixed --norc --no-discordant ' +\
            '-x {tRNA_rRNA_index} -1 {trimed1} -2 {trimed2} '.format(tRNA_rRNA_index = self.rRNA_tRNA_index,
                                                                    trimed1=self.trimed1, trimed2=self.trimed2) +\
            '| samtools view -bS@{threads} - '.format(threads=self.threads)+\
            '> {rRNA_tRNA_out}/tRNA_rRNA.bam'.format(rRNA_tRNA_out = self.rRNA_tRNA_out)
        run_process(self.samplename, command)


        ##extract tr/RNA reads
        command = 'samtools view -h -F4 {rRNA_tRNA_out}/tRNA_rRNA.bam '.format(rRNA_tRNA_out=self.rRNA_tRNA_out)+\
            "| awk '$1~\"^@\" || $2 == 83 || $2 == 163 || $2 == 99 || $2 == 147'" +\
            "| awk '$1~\"^@\" || $3~/gi\||rRNA/'" +\
            '| samtools view -b '+\
            '| bamToFastq -fq {rRNA_FASTQ1} -fq2 {rRNA_FASTQ2} -i -'.format(rRNA_FASTQ1=self.rRNA_fastq1, rRNA_FASTQ2=self.rRNA_fastq2)
        run_process(self.samplename, command)

        command = 'samtools view -h -F4 {rRNA_tRNA_out}/tRNA_rRNA.bam '.format(rRNA_tRNA_out=self.rRNA_tRNA_out)+\
            "| awk '$1~"^@" || $2 == 83 || $2 == 163 || $2 == 99 || $2 == 147'" +\
            "| awk '$1~\"^@\" || $3!~/gi\||rRNA/'" +\
            '| samtools view -b '+\
            '| bamToFastq -fq {TRNA_FASTQ1} -fq2 {TRNA_FASTQ2} -i -'.format(TRNA_FASTQ1=self.tRNA_fastq, rRNA_FASTQ2=self.tRNA_fastq2)
        run_process(self.samplename, command)

        ##extract non tRNA/rRNA reads
        command = 'samtools view -bf4 {rRNA_tRNA_out}/tRNA_rRNA.bam'.format(rRNA_tRNA_out=self.rRNA_tRNA_out)+\
            '| bamToFastq -fq {PREMAP_FASTQ1} -fq2 {PREMAP_FASTQ2} -i - '.format(PREMAP_FASTQ1=self.premap_fastq1,
                                                                                PREMAP_FASTQ2=self.premap_fastq2)
        run_process(self.samplename, command)

    def hisat_map(self):
        # map reads
        command = 'hisat2 -p {threads} -k 10 --no-mixed --no-discordant '.format(threads=self.threads)+\
            '--known-splicesite-infile {Splicesite}'.format(Splicesite=self.splicesite) +\
	        '--novel-splicesite-outfile {hisat_out}/novelsite.txt -x {ref} -1 {PREMAP_FASTQ1} -2 {PREMAP_FASTQ2}'\
               .format(hisat_out=self.hisat_out, PREMAP_FASTQ1=self.premap_fastq1, PREMAP_FASTQ2=self.premap_fastq2) +\
	        '| samtools view -bS - > {hisat_out}/hisat.bam'.format(hisat_out=self.hisat_out)
        run_process(self.samplename, command)

        #split to uniq and multimap
        command = 'split_uniq_bam.py -i {hisat_out}/hisat.bam -o {hisat_out}/hisat -a hisat2'.format(hisat_out=self.hisat_out)
        run_process(self.samplename, command)

        #extract unaligned
        command = 'samtools view -@ {threads} -bf4 ${hisat_out}/hisat.bam'.format(threads=self.threads, hisat_out=self.hisat_out) + \
                '| bamToFastq -i - -fq {bowtie_out}/unmapped.1.fq -fq2 {bowtie_out}/unmapped.2.fq' %(bowtie_out=self.bowtie_out)
        run_process(self.samplename, command)
        command = 'gzip -f {bowtie_out}/unmapped.1.fq;gzip -f {bowtie_out}/unmapped.2.fq'.format(bowtie_out=self.bowtie_out)
        run_process(self.samplename, command)

    def bowtie_map(self):
        # map reads
        command = 'bowtie2 --local -D 20 -R 3 -N 0 -L 8 -i S,1,0.50 -p {threads} -k 10 '.format(threads=self.threads)+\
            '--no-mixed --no-discordant -x {index} -1 {fq_path}/unmapped.1.fq.gz -2 {fq_path}/unmapped.2.fq.gz'\
                .format(index=self.bowtie2_index, fq_path = self.bowtie_out) +\
            '| samtools view -@{threads} -bS - > {bowtie_out}/bowtie2.bam' %(threads=self.threads, bowtie_out=self.bowtie_out)
        run_process(self.samplename, command)

        # split to uniq and multimap
        command = 'split_uniq_bam.py -i {bowtie_out}/bowtie2.bam -o {bowtie_out}/bowtie -a bowtie2'.format(bowtie_out=self.bowtie_out)
        run_process(self.samplename, command)

    def combined_aligned(self):
        command = 'samtools cat %s/hisat.multi.bam %s/bowtie.multi.bam ' %(self.hisat_out, self.bowtie_out)+\
            ' > %s/multi.bam' %(self.combined_out)
        run_process(self.samplename, command)

        command = 'reduce_multi_reads.py --infile {combined_out}/multi.bam --outfile {combined_out}/multi_filtered.bam '\
                    .format(combined_out = self.combined_out) +\
                ' --bam_in --bam_out'
        run_process(self.samplename, command)

        command ='samtools cat %s/multi_filtered.bam %s/hisat.unique.bam %s/bowtie.unique.bam' %(self.combined_out, self.hisat_out, self.bowtie_out) +\
            '| samtools sort -n -@ 24 -O bam -T %s/temp ' %(self.combined_out) +\
            '> %s/primary.bam' %(self.combined_out)
        run_process(self.samplename, command)



def run_process(samplename, command):
    print '[%s] Running: %s' %(samplename, command)
    start = time.time()
    os.system(command)
    end = time.time() - start
    sys.stderr.write('[%s] Used time %.3f min\n' %(samplename, end/60))
    return 0


def makeFolder(folder):
    """
        Input a folder name and make a folder if it is non-existed
    """
    sys.stderr.write('Creating %s....\n' %folder)
    if os.path.isdir(folder):
        sys.stderr.write('%s exists.\n' %folder)
    else:
        os.mkdir(folder)
        sys.stderr.write('Created %s.\n' %folder)
    return 0


def programSequenceControl(fastqFile,resultpath,cores,humanIndex, bedpath,
                           tRNA_index, rRNA_index, adaptors,spliceFile,strand):
    # make result directories
    folders = [resultpath,trimResultPath,hisatResultPath,hisatUnmappedPath,hisatMappedPath,
            bowtieResultPath,bowtieMappedPath,mergedPath,mergedBamPath,uniqueBamPath, multiBamPath,
            countPath, alltRNAfastqPath, mergedBedPath, uniqueBedPath, multiBedPath,
            allrRNAfastqPath]
    map(makeFolder,folders)

    # trimmomatic
    trimmomatic(fastqFile, trimResultPath,sampleName,cores,adaptors)

    # hisat map
    hisatOutprefix = hisat_pariedEnd( trimResultPath,
            hisatMappedPath,
            sampleName, cores ,
            humanIndex, spliceFile)

    # extract unmapped sequence
    id2Fastq(trimResultPath, sampleName, hisatOutprefix + '.id.dat', hisatUnmappedPath, cores)

    # local mapped
    bowtieOutprefix = bowtie_pairedEnd(hisatUnmappedPath, bowtieResultPath,
                                        humanIndex, sampleName,cores)

    #merge mapped bams
    primary_bam = multibamToPrimary(hisatOutprefix + '.multi.bam', bowtieOutprefix + '.multi.bam',
                                    hisatOutprefix + '.unique.bam', bowtieOutprefix + '.unique.bam',
                                        uniqueBamPath, sampleName,cores)

    #all tRNA ID
    tRNA_id_file = getBedMappedID(primary_bam, alltRNAfastqPath, sampleName, bedpath + '/tRNA.bed')
    rRNA_id_file = getBedMappedID(primary_bam, allrRNAfastqPath, sampleName, bedpath + '/rRNA.bed')
    id2Fastq(trimResultPath, sampleName, tRNA_id_file, alltRNAfastqPath, cores)
    id2Fastq(trimResultPath, sampleName, rRNA_id_file, allrRNAfastqPath, cores)

    #mapping tRNA
    tRNA_bam = rnaRemap(alltRNAfastqPath,cores,sampleName, countPath, alltRNAfastqPath, tRNA_index, strand, 'tRNA')
    rRNA_bam = rnaRemap(allrRNAfastqPath,cores,sampleName, countPath, allrRNAfastqPath, rRNA_index, 2 ,'rRNA')

    #countBAm
    countBam(primary_bam, bedpath, countPath, sampleName)

    #count tRNA

    usedTime = time.time()-start
    print 'Finished: %s in %.3f hr ' %(sampleName ,usedTime/3600)
    return 0


def strand2int(strandeness):
    if strandeness == 'forward' :
        strand = 0
    elif strandeness == 'reverse':
        strand = 1
    elif strandeness == 'both':
        strand = 2
    return strand

def main():
    programname = sys.argv[0]
    args = getopt()
    fastqFile = args.fastq
    resultpath = args.outdir
    cores = args.threads
    humanIndex = args.humanIndex
    bedpath = args.bedpath
    tRNA_index = args.tRNAindex
    rRNA_index = args.rRNAindex
    adaptors = args.adaptors
    spliceFile = args.splicesite
    strand = strand2int(args.strand)
    sys.stderr.write('Using %s strand for %s\n' %(args.strand,fastqFile) )
    programSequenceControl(fastqFile,resultpath,cores,humanIndex, bedpath,tRNA_index, rRNA_index, adaptors,spliceFile,strand)
    return 0

if __name__ == '__main__':
    main()
